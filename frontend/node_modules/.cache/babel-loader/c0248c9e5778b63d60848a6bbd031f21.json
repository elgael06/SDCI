{"ast":null,"code":"const NAMESPACE = 'ionicons';\nlet scopeId;\nlet hostTagName;\nlet isSvgMode = false;\nlet queuePending = false;\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || {\n  head: {}\n};\nconst plt = {\n  $flags$: 0,\n  $resourcesUrl$: '',\n  jmp: h => h(),\n  raf: h => requestAnimationFrame(h),\n  ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n  rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n  ce: (eventName, opts) => new CustomEvent(eventName, opts)\n};\n\nconst promiseResolve = v => Promise.resolve(v);\n\nconst supportsConstructibleStylesheets = /*@__PURE__*/(() => {\n  try {\n    new CSSStyleSheet();\n    return typeof new CSSStyleSheet().replace === 'function';\n  } catch (e) {}\n\n  return false;\n})();\n\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\n\nconst createTime = (fnName, tagName = '') => {\n  {\n    return () => {\n      return;\n    };\n  }\n};\n\nconst uniqueTime = (key, measureText) => {\n  {\n    return () => {\n      return;\n    };\n  }\n};\n\nconst rootAppliedStyles = new WeakMap();\n\nconst registerStyle = (scopeId, cssText, allowCS) => {\n  let style = styles.get(scopeId);\n\n  if (supportsConstructibleStylesheets && allowCS) {\n    style = style || new CSSStyleSheet();\n    style.replace(cssText);\n  } else {\n    style = cssText;\n  }\n\n  styles.set(scopeId, style);\n};\n\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n  let scopeId = getScopeId(cmpMeta);\n  let style = styles.get(scopeId); // if an element is NOT connected then getRootNode() will return the wrong root node\n  // so the fallback is to always use the document for the root node in those cases\n\n  styleContainerNode = styleContainerNode.nodeType === 11\n  /* DocumentFragment */\n  ? styleContainerNode : doc;\n\n  if (style) {\n    if (typeof style === 'string') {\n      styleContainerNode = styleContainerNode.head || styleContainerNode;\n      let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n      let styleElm;\n\n      if (!appliedStyles) {\n        rootAppliedStyles.set(styleContainerNode, appliedStyles = new Set());\n      }\n\n      if (!appliedStyles.has(scopeId)) {\n        {\n          {\n            styleElm = doc.createElement('style');\n            styleElm.innerHTML = style;\n          }\n          styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n        }\n\n        if (appliedStyles) {\n          appliedStyles.add(scopeId);\n        }\n      }\n    } else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n      styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n    }\n  }\n\n  return scopeId;\n};\n\nconst attachStyles = hostRef => {\n  const cmpMeta = hostRef.$cmpMeta$;\n  const elm = hostRef.$hostElement$;\n  const flags = cmpMeta.$flags$;\n  const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n  const scopeId = addStyle(elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta);\n\n  if (flags & 10\n  /* needsScopedEncapsulation */\n  ) {\n      // only required when we're NOT using native shadow dom (slot)\n      // or this browser doesn't support native shadow dom\n      // and this host element was NOT created with SSR\n      // let's pick out the inner content for slot projection\n      // create a node to represent where the original\n      // content was first placed, which is useful later on\n      // DOM WRITE!!\n      elm['s-sc'] = scopeId;\n      elm.classList.add(scopeId + '-h');\n    }\n\n  endAttachStyles();\n};\n\nconst getScopeId = (cmp, mode) => 'sc-' + cmp.$tagName$;\n/**\n * Default style mode id\n */\n\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\n\n\nconst EMPTY_OBJ = {};\n\nconst isDef = v => v != null;\n\nconst isComplexType = o => {\n  // https://jsperf.com/typeof-fn-object/5\n  o = typeof o;\n  return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\n\n\nconst h = (nodeName, vnodeData, ...children) => {\n  let child = null;\n  let simple = false;\n  let lastSimple = false;\n  let vNodeChildren = [];\n\n  const walk = c => {\n    for (let i = 0; i < c.length; i++) {\n      child = c[i];\n\n      if (Array.isArray(child)) {\n        walk(child);\n      } else if (child != null && typeof child !== 'boolean') {\n        if (simple = typeof nodeName !== 'function' && !isComplexType(child)) {\n          child = String(child);\n        }\n\n        if (simple && lastSimple) {\n          // If the previous child was simple (string), we merge both\n          vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n        } else {\n          // Append a new vNode, if it's text, we create a text vNode\n          vNodeChildren.push(simple ? newVNode(null, child) : child);\n        }\n\n        lastSimple = simple;\n      }\n    }\n  };\n\n  walk(children);\n\n  if (vnodeData) {\n    {\n      const classData = vnodeData.className || vnodeData.class;\n\n      if (classData) {\n        vnodeData.class = typeof classData !== 'object' ? classData : Object.keys(classData).filter(k => classData[k]).join(' ');\n      }\n    }\n  }\n\n  const vnode = newVNode(nodeName, null);\n  vnode.$attrs$ = vnodeData;\n\n  if (vNodeChildren.length > 0) {\n    vnode.$children$ = vNodeChildren;\n  }\n\n  return vnode;\n};\n\nconst newVNode = (tag, text) => {\n  const vnode = {\n    $flags$: 0,\n    $tag$: tag,\n    $text$: text,\n    $elm$: null,\n    $children$: null\n  };\n  {\n    vnode.$attrs$ = null;\n  }\n  return vnode;\n};\n\nconst Host = {};\n\nconst isHost = node => node && node.$tag$ === Host;\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n\n\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n  if (oldValue !== newValue) {\n    let isProp = isMemberInElement(elm, memberName);\n    let ln = memberName.toLowerCase();\n\n    if (memberName === 'class') {\n      const classList = elm.classList;\n      const oldClasses = parseClassList(oldValue);\n      const newClasses = parseClassList(newValue);\n      classList.remove(...oldClasses.filter(c => c && !newClasses.includes(c)));\n      classList.add(...newClasses.filter(c => c && !oldClasses.includes(c)));\n    } else {\n      // Set property if it exists and it's not a SVG\n      const isComplex = isComplexType(newValue);\n\n      if ((isProp || isComplex && newValue !== null) && !isSvg) {\n        try {\n          if (!elm.tagName.includes('-')) {\n            let n = newValue == null ? '' : newValue; // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n\n            if (memberName === 'list') {\n              isProp = false; // tslint:disable-next-line: triple-equals\n            } else if (oldValue == null || elm[memberName] != n) {\n              elm[memberName] = n;\n            }\n          } else {\n            elm[memberName] = newValue;\n          }\n        } catch (e) {}\n      }\n\n      if (newValue == null || newValue === false) {\n        if (newValue !== false || elm.getAttribute(memberName) === '') {\n          {\n            elm.removeAttribute(memberName);\n          }\n        }\n      } else if ((!isProp || flags & 4\n      /* isHost */\n      || isSvg) && !isComplex) {\n        newValue = newValue === true ? '' : newValue;\n        {\n          elm.setAttribute(memberName, newValue);\n        }\n      }\n    }\n  }\n};\n\nconst parseClassListRegex = /\\s/;\n\nconst parseClassList = value => !value ? [] : value.split(parseClassListRegex);\n\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n  // if the element passed in is a shadow root, which is a document fragment\n  // then we want to be adding attrs/props to the shadow root's \"host\" element\n  // if it's not a shadow root, then we add attrs/props to the same element\n  const elm = newVnode.$elm$.nodeType === 11\n  /* DocumentFragment */\n  && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n  const oldVnodeAttrs = oldVnode && oldVnode.$attrs$ || EMPTY_OBJ;\n  const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n  {\n    // remove attributes no longer present on the vnode by setting them to undefined\n    for (memberName in oldVnodeAttrs) {\n      if (!(memberName in newVnodeAttrs)) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n      }\n    }\n  } // add new & update changed attributes\n\n  for (memberName in newVnodeAttrs) {\n    setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n  }\n};\n\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n  // tslint:disable-next-line: prefer-const\n  let newVNode = newParentVNode.$children$[childIndex];\n  let i = 0;\n  let elm;\n  let childNode;\n\n  if (newVNode.$text$ !== null) {\n    // create text node\n    elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n  } else {\n    // create element\n    elm = newVNode.$elm$ = doc.createElement(newVNode.$tag$); // add css classes, attrs, props, listeners, etc.\n\n    {\n      updateElement(null, newVNode, isSvgMode);\n    }\n\n    if (isDef(scopeId) && elm['s-si'] !== scopeId) {\n      // if there is a scopeId and this is the initial render\n      // then let's add the scopeId as a css class\n      elm.classList.add(elm['s-si'] = scopeId);\n    }\n\n    if (newVNode.$children$) {\n      for (i = 0; i < newVNode.$children$.length; ++i) {\n        // create the node\n        childNode = createElm(oldParentVNode, newVNode, i); // return node could have been null\n\n        if (childNode) {\n          // append our new node\n          elm.appendChild(childNode);\n        }\n      }\n    }\n  }\n\n  return elm;\n};\n\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n  let containerElm = parentElm;\n  let childNode;\n\n  if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n    containerElm = containerElm.shadowRoot;\n  }\n\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnodes[startIdx]) {\n      childNode = createElm(null, parentVNode, startIdx);\n\n      if (childNode) {\n        vnodes[startIdx].$elm$ = childNode;\n        containerElm.insertBefore(childNode, before);\n      }\n    }\n  }\n};\n\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnode = vnodes[startIdx]) {\n      elm = vnode.$elm$; // remove the vnode's element from the dom\n\n      elm.remove();\n    }\n  }\n};\n\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n  let oldStartIdx = 0;\n  let newStartIdx = 0;\n  let oldEndIdx = oldCh.length - 1;\n  let oldStartVnode = oldCh[0];\n  let oldEndVnode = oldCh[oldEndIdx];\n  let newEndIdx = newCh.length - 1;\n  let newStartVnode = newCh[0];\n  let newEndVnode = newCh[newEndIdx];\n  let node;\n\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    if (oldStartVnode == null) {\n      // Vnode might have been moved left\n      oldStartVnode = oldCh[++oldStartIdx];\n    } else if (oldEndVnode == null) {\n      oldEndVnode = oldCh[--oldEndIdx];\n    } else if (newStartVnode == null) {\n      newStartVnode = newCh[++newStartIdx];\n    } else if (newEndVnode == null) {\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newStartVnode)) {\n      patch(oldStartVnode, newStartVnode);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else if (isSameVnode(oldEndVnode, newEndVnode)) {\n      patch(oldEndVnode, newEndVnode);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newEndVnode)) {\n      patch(oldStartVnode, newEndVnode);\n      parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldEndVnode, newStartVnode)) {\n      patch(oldEndVnode, newStartVnode);\n      parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else {\n      {\n        // new element\n        node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n        newStartVnode = newCh[++newStartIdx];\n      }\n\n      if (node) {\n        {\n          oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n        }\n      }\n    }\n  }\n\n  if (oldStartIdx > oldEndIdx) {\n    addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n  } else if (newStartIdx > newEndIdx) {\n    removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n  }\n};\n\nconst isSameVnode = (vnode1, vnode2) => {\n  // compare if two vnode to see if they're \"technically\" the same\n  // need to have the same element tag, and same key to be the same\n  if (vnode1.$tag$ === vnode2.$tag$) {\n    return true;\n  }\n\n  return false;\n};\n\nconst patch = (oldVNode, newVNode) => {\n  const elm = newVNode.$elm$ = oldVNode.$elm$;\n  const oldChildren = oldVNode.$children$;\n  const newChildren = newVNode.$children$;\n  const text = newVNode.$text$;\n\n  if (text === null) {\n    // element node\n    {\n      {\n        // either this is the first render of an element OR it's an update\n        // AND we already know it's possible it could have changed\n        // this updates the element's css classes, attrs, props, listeners, etc.\n        updateElement(oldVNode, newVNode, isSvgMode);\n      }\n    }\n\n    if (oldChildren !== null && newChildren !== null) {\n      // looks like there's child vnodes for both the old and new vnodes\n      updateChildren(elm, oldChildren, newVNode, newChildren);\n    } else if (newChildren !== null) {\n      // no old child vnodes, but there are new child vnodes to add\n      if (oldVNode.$text$ !== null) {\n        // the old vnode was text, so be sure to clear it out\n        elm.textContent = '';\n      } // add the new vnode children\n\n\n      addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n    } else if (oldChildren !== null) {\n      // no new child vnodes, but there are old child vnodes to remove\n      removeVnodes(oldChildren, 0, oldChildren.length - 1);\n    }\n  } else if (oldVNode.$text$ !== text) {\n    // update the text content for the text only vnode\n    // and also only if the text is different than before\n    elm.data = text;\n  }\n};\n\nconst renderVdom = (hostRef, renderFnResults) => {\n  const hostElm = hostRef.$hostElement$;\n  const cmpMeta = hostRef.$cmpMeta$;\n  const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n  const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n  hostTagName = hostElm.tagName;\n\n  if (cmpMeta.$attrsToReflect$) {\n    rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n    cmpMeta.$attrsToReflect$.map(([propName, attribute]) => rootVnode.$attrs$[attribute] = hostElm[propName]);\n  }\n\n  rootVnode.$tag$ = null;\n  rootVnode.$flags$ |= 4\n  /* isHost */\n  ;\n  hostRef.$vnode$ = rootVnode;\n  rootVnode.$elm$ = oldVNode.$elm$ = hostElm.shadowRoot || hostElm;\n  {\n    scopeId = hostElm['s-sc'];\n  } // synchronous patch\n\n  patch(oldVNode, rootVnode);\n};\n\nconst getElement = ref => getHostRef(ref).$hostElement$;\n\nconst emitEvent = (elm, name, opts) => {\n  const ev = plt.ce(name, opts);\n  elm.dispatchEvent(ev);\n  return ev;\n};\n\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n  if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n    ancestorComponent['s-p'].push(new Promise(r => hostRef.$onRenderResolve$ = r));\n  }\n};\n\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n  {\n    hostRef.$flags$ |= 16\n    /* isQueuedForUpdate */\n    ;\n  }\n\n  if (hostRef.$flags$ & 4\n  /* isWaitingForChildren */\n  ) {\n      hostRef.$flags$ |= 512\n      /* needsRerender */\n      ;\n      return;\n    }\n\n  attachToAncestor(hostRef, hostRef.$ancestorComponent$); // there is no ancestor component or the ancestor component\n  // has already fired off its lifecycle update then\n  // fire off the initial update\n\n  const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n\n  return writeTask(dispatch);\n};\n\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n  const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n  const instance = hostRef.$lazyInstance$;\n  let promise;\n  endSchedule();\n  return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\n\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n  // updateComponent\n  const elm = hostRef.$hostElement$;\n  const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n  const rc = elm['s-rc'];\n\n  if (isInitialLoad) {\n    // DOM WRITE!\n    attachStyles(hostRef);\n  }\n\n  const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n  {\n    callRender(hostRef, instance);\n  }\n\n  if (rc) {\n    // ok, so turns out there are some child host elements\n    // waiting on this parent element to load\n    // let's fire off all update callbacks waiting\n    rc.map(cb => cb());\n    elm['s-rc'] = undefined;\n  }\n\n  endRender();\n  endUpdate();\n  {\n    const childrenPromises = elm['s-p'];\n\n    const postUpdate = () => postUpdateComponent(hostRef);\n\n    if (childrenPromises.length === 0) {\n      postUpdate();\n    } else {\n      Promise.all(childrenPromises).then(postUpdate);\n      hostRef.$flags$ |= 4\n      /* isWaitingForChildren */\n      ;\n      childrenPromises.length = 0;\n    }\n  }\n};\n\nconst callRender = (hostRef, instance, elm) => {\n  try {\n    instance = instance.render();\n    {\n      hostRef.$flags$ &= ~16\n      /* isQueuedForUpdate */\n      ;\n    }\n    {\n      hostRef.$flags$ |= 2\n      /* hasRendered */\n      ;\n    }\n    {\n      {\n        // looks like we've got child nodes to render into this host element\n        // or we need to update the css class/attrs on the host element\n        // DOM WRITE!\n        {\n          renderVdom(hostRef, instance);\n        }\n      }\n    }\n  } catch (e) {\n    consoleError(e, hostRef.$hostElement$);\n  }\n\n  return null;\n};\n\nconst postUpdateComponent = hostRef => {\n  const tagName = hostRef.$cmpMeta$.$tagName$;\n  const elm = hostRef.$hostElement$;\n  const endPostUpdate = createTime('postUpdate', tagName);\n  const ancestorComponent = hostRef.$ancestorComponent$;\n\n  if (!(hostRef.$flags$ & 64\n  /* hasLoadedComponent */\n  )) {\n    hostRef.$flags$ |= 64\n    /* hasLoadedComponent */\n    ;\n    {\n      // DOM WRITE!\n      addHydratedFlag(elm);\n    }\n    endPostUpdate();\n    {\n      hostRef.$onReadyResolve$(elm);\n\n      if (!ancestorComponent) {\n        appDidLoad();\n      }\n    }\n  } else {\n    endPostUpdate();\n  } // load events fire from bottom to top\n  // the deepest elements load first then bubbles up\n\n\n  {\n    if (hostRef.$onRenderResolve$) {\n      hostRef.$onRenderResolve$();\n      hostRef.$onRenderResolve$ = undefined;\n    }\n\n    if (hostRef.$flags$ & 512\n    /* needsRerender */\n    ) {\n        nextTick(() => scheduleUpdate(hostRef, false));\n      }\n\n    hostRef.$flags$ &= ~(4\n    /* isWaitingForChildren */\n    | 512\n    /* needsRerender */\n    );\n  } // ( •_•)\n  // ( •_•)>⌐■-■\n  // (⌐■_■)\n};\n\nconst appDidLoad = who => {\n  // on appload\n  // we have finish the first big initial render\n  {\n    addHydratedFlag(doc.documentElement);\n  }\n  nextTick(() => emitEvent(win, 'appload', {\n    detail: {\n      namespace: NAMESPACE\n    }\n  }));\n};\n\nconst safeCall = (instance, method, arg) => {\n  if (instance && instance[method]) {\n    try {\n      return instance[method](arg);\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  return undefined;\n};\n\nconst then = (promise, thenFn) => {\n  return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\n\nconst addHydratedFlag = elm => elm.classList.add('hydrated');\n\nconst parsePropertyValue = (propValue, propType) => {\n  // ensure this value is of the correct prop type\n  if (propValue != null && !isComplexType(propValue)) {\n    if (propType & 4\n    /* Boolean */\n    ) {\n        // per the HTML spec, any string value means it is a boolean true value\n        // but we'll cheat here and say that the string \"false\" is the boolean false\n        return propValue === 'false' ? false : propValue === '' || !!propValue;\n      }\n\n    if (propType & 1\n    /* String */\n    ) {\n        // could have been passed as a number or boolean\n        // but we still want it as a string\n        return String(propValue);\n      } // redundant return here for better minification\n\n\n    return propValue;\n  } // not sure exactly what type we want\n  // so no need to change to a different type\n\n\n  return propValue;\n};\n\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\n\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n  // check our new property value against our internal value\n  const hostRef = getHostRef(ref);\n  const elm = hostRef.$hostElement$;\n  const oldVal = hostRef.$instanceValues$.get(propName);\n  const flags = hostRef.$flags$;\n  const instance = hostRef.$lazyInstance$;\n  newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n\n  if ((!(flags & 8\n  /* isConstructingInstance */\n  ) || oldVal === undefined) && newVal !== oldVal) {\n    // gadzooks! the property's value has changed!!\n    // set our new value!\n    hostRef.$instanceValues$.set(propName, newVal);\n\n    if (instance) {\n      // get an array of method names of watch functions to call\n      if (cmpMeta.$watchers$ && flags & 128\n      /* isWatchReady */\n      ) {\n          const watchMethods = cmpMeta.$watchers$[propName];\n\n          if (watchMethods) {\n            // this instance is watching for when this property changed\n            watchMethods.map(watchMethodName => {\n              try {\n                // fire off each of the watch methods that are watching this property\n                instance[watchMethodName](newVal, oldVal, propName);\n              } catch (e) {\n                consoleError(e, elm);\n              }\n            });\n          }\n        }\n\n      if ((flags & (2\n      /* hasRendered */\n      | 16\n      /* isQueuedForUpdate */\n      )) === 2\n      /* hasRendered */\n      ) {\n          // looks like this value actually changed, so we've got work to do!\n          // but only if we've already rendered, otherwise just chill out\n          // queue that we need to do an update, but don't worry about queuing\n          // up millions cuz this function ensures it only runs once\n          scheduleUpdate(hostRef, false);\n        }\n    }\n  }\n};\n\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n  if (cmpMeta.$members$) {\n    if (Cstr.watchers) {\n      cmpMeta.$watchers$ = Cstr.watchers;\n    } // It's better to have a const than two Object.entries()\n\n\n    const members = Object.entries(cmpMeta.$members$);\n    const prototype = Cstr.prototype;\n    members.map(([memberName, [memberFlags]]) => {\n      if (memberFlags & 31\n      /* Prop */\n      || flags & 2\n      /* proxyState */\n      && memberFlags & 32\n      /* State */\n      ) {\n        // proxyComponent - prop\n        Object.defineProperty(prototype, memberName, {\n          get() {\n            // proxyComponent, get value\n            return getValue(this, memberName);\n          },\n\n          set(newValue) {\n            // proxyComponent, set value\n            setValue(this, memberName, newValue, cmpMeta);\n          },\n\n          configurable: true,\n          enumerable: true\n        });\n      }\n    });\n\n    if (flags & 1\n    /* isElementConstructor */\n    ) {\n        const attrNameToPropName = new Map();\n\n        prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n          plt.jmp(() => {\n            const propName = attrNameToPropName.get(attrName);\n            this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n          });\n        }; // create an array of attributes to observe\n        // and also create a map of html attribute name to js property name\n\n\n        Cstr.observedAttributes = members.filter(([_, m]) => m[0] & 15\n        /* HasAttribute */\n        ) // filter to only keep props that should match attributes\n        .map(([propName, m]) => {\n          const attrName = m[1] || propName;\n          attrNameToPropName.set(attrName, propName);\n\n          if (m[0] & 512\n          /* ReflectAttr */\n          ) {\n              cmpMeta.$attrsToReflect$.push([propName, attrName]);\n            }\n\n          return attrName;\n        });\n      }\n  }\n\n  return Cstr;\n};\n\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n  // initializeComponent\n  if ((hostRef.$flags$ & 32\n  /* hasInitializedComponent */\n  ) === 0) {\n    {\n      // we haven't initialized this element yet\n      hostRef.$flags$ |= 32\n      /* hasInitializedComponent */\n      ; // lazy loaded components\n      // request the component's implementation to be\n      // wired up with the host element\n\n      Cstr = loadModule(cmpMeta);\n\n      if (Cstr.then) {\n        // Await creates a micro-task avoid if possible\n        const endLoad = uniqueTime();\n        Cstr = await Cstr;\n        endLoad();\n      }\n\n      if (!Cstr.isProxied) {\n        // we'eve never proxied this Constructor before\n        // let's add the getters/setters to its prototype before\n        // the first time we create an instance of the implementation\n        {\n          cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        proxyComponent(Cstr, cmpMeta, 2\n        /* proxyState */\n        );\n        Cstr.isProxied = true;\n      }\n\n      const endNewInstance = createTime('createInstance', cmpMeta.$tagName$); // ok, time to construct the instance\n      // but let's keep track of when we start and stop\n      // so that the getters/setters don't incorrectly step on data\n\n      {\n        hostRef.$flags$ |= 8\n        /* isConstructingInstance */\n        ;\n      } // construct the lazy-loaded component implementation\n      // passing the hostRef is very important during\n      // construction in order to directly wire together the\n      // host element and the lazy-loaded instance\n\n      try {\n        new Cstr(hostRef);\n      } catch (e) {\n        consoleError(e);\n      }\n\n      {\n        hostRef.$flags$ &= ~8\n        /* isConstructingInstance */\n        ;\n      }\n      {\n        hostRef.$flags$ |= 128\n        /* isWatchReady */\n        ;\n      }\n      endNewInstance();\n      fireConnectedCallback(hostRef.$lazyInstance$);\n    }\n\n    if (Cstr.style) {\n      // this component has styles but we haven't registered them yet\n      let style = Cstr.style;\n      const scopeId = getScopeId(cmpMeta);\n\n      if (!styles.has(scopeId)) {\n        const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n        registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1\n        /* shadowDomEncapsulation */\n        ));\n        endRegisterStyles();\n      }\n    }\n  } // we've successfully created a lazy instance\n\n\n  const ancestorComponent = hostRef.$ancestorComponent$;\n\n  const schedule = () => scheduleUpdate(hostRef, true);\n\n  if (ancestorComponent && ancestorComponent['s-rc']) {\n    // this is the intial load and this component it has an ancestor component\n    // but the ancestor component has NOT fired its will update lifecycle yet\n    // so let's just cool our jets and wait for the ancestor to continue first\n    // this will get fired off when the ancestor component\n    // finally gets around to rendering its lazy self\n    // fire off the initial update\n    ancestorComponent['s-rc'].push(schedule);\n  } else {\n    schedule();\n  }\n};\n\nconst fireConnectedCallback = instance => {\n  {\n    safeCall(instance, 'connectedCallback');\n  }\n};\n\nconst connectedCallback = elm => {\n  if ((plt.$flags$ & 1\n  /* isTmpDisconnected */\n  ) === 0) {\n    const hostRef = getHostRef(elm);\n    const cmpMeta = hostRef.$cmpMeta$;\n    const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n\n    if (!(hostRef.$flags$ & 1\n    /* hasConnected */\n    )) {\n      // first time this component has connected\n      hostRef.$flags$ |= 1\n      /* hasConnected */\n      ;\n      {\n        // find the first ancestor component (if there is one) and register\n        // this component as one of the actively loading child components for its ancestor\n        let ancestorComponent = elm;\n\n        while (ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host) {\n          // climb up the ancestors looking for the first\n          // component that hasn't finished its lifecycle update yet\n          if (ancestorComponent['s-p']) {\n            // we found this components first ancestor component\n            // keep a reference to this component's ancestor component\n            attachToAncestor(hostRef, hostRef.$ancestorComponent$ = ancestorComponent);\n            break;\n          }\n        }\n      } // Lazy properties\n      // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n\n      if (cmpMeta.$members$) {\n        Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n          if (memberFlags & 31\n          /* Prop */\n          && elm.hasOwnProperty(memberName)) {\n            const value = elm[memberName];\n            delete elm[memberName];\n            elm[memberName] = value;\n          }\n        });\n      }\n\n      {\n        initializeComponent(elm, hostRef, cmpMeta);\n      }\n    } else {\n      // fire off connectedCallback() on component instance\n      fireConnectedCallback(hostRef.$lazyInstance$);\n    }\n\n    endConnected();\n  }\n};\n\nconst disconnectedCallback = elm => {\n  if ((plt.$flags$ & 1\n  /* isTmpDisconnected */\n  ) === 0) {\n    const hostRef = getHostRef(elm);\n    const instance = hostRef.$lazyInstance$;\n    {\n      safeCall(instance, 'disconnectedCallback');\n    }\n  }\n};\n\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n  const endBootstrap = createTime();\n  const cmpTags = [];\n  const exclude = options.exclude || [];\n  const customElements = win.customElements;\n  const head = doc.head;\n  const metaCharset = /*@__PURE__*/head.querySelector('meta[charset]');\n  const visibilityStyle = /*@__PURE__*/doc.createElement('style');\n  const deferredConnectedCallbacks = [];\n  let appLoadFallback;\n  let isBootstrapping = true;\n  Object.assign(plt, options);\n  plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n  lazyBundles.map(lazyBundle => lazyBundle[1].map(compactMeta => {\n    const cmpMeta = {\n      $flags$: compactMeta[0],\n      $tagName$: compactMeta[1],\n      $members$: compactMeta[2],\n      $listeners$: compactMeta[3]\n    };\n    {\n      cmpMeta.$members$ = compactMeta[2];\n    }\n    {\n      cmpMeta.$attrsToReflect$ = [];\n    }\n    {\n      cmpMeta.$watchers$ = {};\n    }\n    const tagName = cmpMeta.$tagName$;\n    const HostElement = class extends HTMLElement {\n      // StencilLazyHost\n      constructor(self) {\n        // @ts-ignore\n        super(self);\n        self = this;\n        registerHost(self, cmpMeta);\n\n        if (cmpMeta.$flags$ & 1\n        /* shadowDomEncapsulation */\n        ) {\n            // this component is using shadow dom\n            // and this browser supports shadow dom\n            // add the read-only property \"shadowRoot\" to the host element\n            // adding the shadow root build conditionals to minimize runtime\n            {\n              {\n                self.attachShadow({\n                  mode: 'open'\n                });\n              }\n            }\n          }\n      }\n\n      connectedCallback() {\n        if (appLoadFallback) {\n          clearTimeout(appLoadFallback);\n          appLoadFallback = null;\n        }\n\n        if (isBootstrapping) {\n          // connectedCallback will be processed once all components have been registered\n          deferredConnectedCallbacks.push(this);\n        } else {\n          plt.jmp(() => connectedCallback(this));\n        }\n      }\n\n      disconnectedCallback() {\n        plt.jmp(() => disconnectedCallback(this));\n      }\n\n      componentOnReady() {\n        return getHostRef(this).$onReadyPromise$;\n      }\n\n    };\n    cmpMeta.$lazyBundleId$ = lazyBundle[0];\n\n    if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n      cmpTags.push(tagName);\n      customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1\n      /* isElementConstructor */\n      ));\n    }\n  }));\n  {\n    visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n    visibilityStyle.setAttribute('data-styles', '');\n    head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n  } // Process deferred connectedCallbacks now all components have been registered\n\n  isBootstrapping = false;\n\n  if (deferredConnectedCallbacks.length) {\n    deferredConnectedCallbacks.map(host => host.connectedCallback());\n  } else {\n    {\n      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30));\n    }\n  } // Fallback appLoad event\n\n\n  endBootstrap();\n};\n\nconst getAssetPath = path => {\n  const assetUrl = new URL(path, plt.$resourcesUrl$);\n  return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\n\nconst hostRefs = new WeakMap();\n\nconst getHostRef = ref => hostRefs.get(ref);\n\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set(hostRef.$lazyInstance$ = lazyInstance, hostRef);\n\nconst registerHost = (elm, cmpMeta) => {\n  const hostRef = {\n    $flags$: 0,\n    $hostElement$: elm,\n    $cmpMeta$: cmpMeta,\n    $instanceValues$: new Map()\n  };\n  {\n    hostRef.$onReadyPromise$ = new Promise(r => hostRef.$onReadyResolve$ = r);\n    elm['s-p'] = [];\n    elm['s-rc'] = [];\n  }\n  return hostRefs.set(elm, hostRef);\n};\n\nconst isMemberInElement = (elm, memberName) => memberName in elm;\n\nconst consoleError = (e, el) => (0, console.error)(e, el);\n\nconst cmpModules = /*@__PURE__*/new Map();\n\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n  // loadModuleImport\n  const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n  const bundleId = cmpMeta.$lazyBundleId$;\n  const module = cmpModules.get(bundleId);\n\n  if (module) {\n    return module[exportName];\n  }\n\n  return import(\n  /* webpackInclude: /\\.entry\\.js$/ */\n\n  /* webpackExclude: /\\.system\\.entry\\.js$/ */\n\n  /* webpackMode: \"lazy\" */\n  `./${bundleId}.entry.js${''}`).then(importedModule => {\n    {\n      cmpModules.set(bundleId, importedModule);\n    }\n    return importedModule[exportName];\n  }, consoleError);\n};\n\nconst styles = new Map();\nconst queueDomReads = [];\nconst queueDomWrites = [];\n\nconst queueTask = (queue, write) => cb => {\n  queue.push(cb);\n\n  if (!queuePending) {\n    queuePending = true;\n\n    if (write && plt.$flags$ & 4\n    /* queueSync */\n    ) {\n        nextTick(flush);\n      } else {\n      plt.raf(flush);\n    }\n  }\n};\n\nconst consume = queue => {\n  for (let i = 0; i < queue.length; i++) {\n    try {\n      queue[i](performance.now());\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  queue.length = 0;\n};\n\nconst flush = () => {\n  // always force a bunch of medium callbacks to run, but still have\n  // a throttle on how many can run in a certain time\n  // DOM READS!!!\n  consume(queueDomReads); // DOM WRITES!!!\n\n  {\n    consume(queueDomWrites);\n\n    if (queuePending = queueDomReads.length > 0) {\n      // still more to do yet, but we've run out of time\n      // let's let this thing cool off and try again in the next tick\n      plt.raf(flush);\n    }\n  }\n};\n\nconst nextTick = /*@__PURE__*/cb => promiseResolve().then(cb);\n\nconst writeTask = /*@__PURE__*/queueTask(queueDomWrites, true);\nexport { Host as H, getElement as a, bootstrapLazy as b, getAssetPath as g, h, promiseResolve as p, registerInstance as r };","map":{"version":3,"sources":["/home/gael/development/front-lamar/node_modules/ionicons/dist/esm/index-1880c860.js"],"names":["NAMESPACE","scopeId","hostTagName","isSvgMode","queuePending","win","window","doc","document","head","plt","$flags$","$resourcesUrl$","jmp","h","raf","requestAnimationFrame","ael","el","eventName","listener","opts","addEventListener","rel","removeEventListener","ce","CustomEvent","promiseResolve","v","Promise","resolve","supportsConstructibleStylesheets","CSSStyleSheet","replace","e","HYDRATED_CSS","createTime","fnName","tagName","uniqueTime","key","measureText","rootAppliedStyles","WeakMap","registerStyle","cssText","allowCS","style","styles","get","set","addStyle","styleContainerNode","cmpMeta","mode","hostElm","getScopeId","nodeType","appliedStyles","styleElm","Set","has","createElement","innerHTML","insertBefore","querySelector","add","adoptedStyleSheets","includes","attachStyles","hostRef","$cmpMeta$","elm","$hostElement$","flags","endAttachStyles","$tagName$","shadowRoot","getRootNode","classList","cmp","EMPTY_OBJ","isDef","isComplexType","o","nodeName","vnodeData","children","child","simple","lastSimple","vNodeChildren","walk","c","i","length","Array","isArray","String","$text$","push","newVNode","classData","className","class","Object","keys","filter","k","join","vnode","$attrs$","$children$","tag","text","$tag$","$elm$","Host","isHost","node","setAccessor","memberName","oldValue","newValue","isSvg","isProp","isMemberInElement","ln","toLowerCase","oldClasses","parseClassList","newClasses","remove","isComplex","n","getAttribute","removeAttribute","setAttribute","parseClassListRegex","value","split","updateElement","oldVnode","newVnode","host","oldVnodeAttrs","newVnodeAttrs","undefined","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","createTextNode","appendChild","addVnodes","before","parentVNode","vnodes","startIdx","endIdx","containerElm","removeVnodes","updateChildren","oldCh","newCh","oldStartIdx","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","isSameVnode","patch","nextSibling","parentNode","vnode1","vnode2","oldVNode","oldChildren","newChildren","textContent","data","renderVdom","renderFnResults","$vnode$","rootVnode","$attrsToReflect$","map","propName","attribute","getElement","ref","getHostRef","emitEvent","name","ev","dispatchEvent","attachToAncestor","ancestorComponent","$onRenderResolve$","r","scheduleUpdate","isInitialLoad","$ancestorComponent$","dispatch","dispatchHooks","writeTask","endSchedule","instance","$lazyInstance$","promise","then","updateComponent","endUpdate","rc","endRender","callRender","cb","childrenPromises","postUpdate","postUpdateComponent","all","render","consoleError","endPostUpdate","addHydratedFlag","$onReadyResolve$","appDidLoad","nextTick","who","documentElement","detail","namespace","safeCall","method","arg","thenFn","parsePropertyValue","propValue","propType","getValue","$instanceValues$","setValue","newVal","oldVal","$members$","$watchers$","watchMethods","watchMethodName","proxyComponent","Cstr","watchers","members","entries","prototype","memberFlags","defineProperty","configurable","enumerable","attrNameToPropName","Map","attributeChangedCallback","attrName","_oldValue","observedAttributes","_","m","initializeComponent","hmrVersionId","loadModule","endLoad","isProxied","endNewInstance","fireConnectedCallback","endRegisterStyles","schedule","connectedCallback","endConnected","hasOwnProperty","disconnectedCallback","bootstrapLazy","lazyBundles","options","endBootstrap","cmpTags","exclude","customElements","metaCharset","visibilityStyle","deferredConnectedCallbacks","appLoadFallback","isBootstrapping","assign","URL","resourcesUrl","baseURI","href","lazyBundle","compactMeta","$listeners$","HostElement","HTMLElement","constructor","self","registerHost","attachShadow","clearTimeout","componentOnReady","$onReadyPromise$","$lazyBundleId$","define","firstChild","setTimeout","getAssetPath","path","assetUrl","origin","location","pathname","hostRefs","registerInstance","lazyInstance","console","error","cmpModules","exportName","bundleId","module","importedModule","queueDomReads","queueDomWrites","queueTask","queue","write","flush","consume","performance","now","H","a","b","g","p"],"mappings":"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","sourcesContent":["const NAMESPACE = 'ionicons';\n\nlet scopeId;\nlet hostTagName;\nlet isSvgMode = false;\nlet queuePending = false;\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || { head: {} };\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: h => h(),\n    raf: h => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructibleStylesheets =  /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof (new CSSStyleSheet()).replace === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    ;\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst createTime = (fnName, tagName = '') => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst rootAppliedStyles = new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructibleStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        style.replace(cssText);\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    let scopeId = getScopeId(cmpMeta);\n    let style = styles.get(scopeId);\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                {\n                    {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if ( !styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle( elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta);\n    if ( flags & 10 /* needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + ( cmp.$tagName$);\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\nconst isDef = (v) => v != null;\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let simple = false;\n    let lastSimple = false;\n    let vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter(k => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    return vnode;\n};\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    {\n        vnode.$attrs$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\nconst isHost = (node) => node && node.$tag$ === Host;\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if ( memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter(c => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter(c => c && !oldClasses.includes(c)));\n        }\n        else {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        let n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                            // tslint:disable-next-line: triple-equals\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* DocumentFragment */ && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    let newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    if ( newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else {\n        // create element\n        elm = newVNode.$elm$ = ( doc.createElement( newVNode.$tag$));\n        // add css classes, attrs, props, listeners, etc.\n        {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if ( isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n    }\n    return elm;\n};\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = ( parentElm);\n    let childNode;\n    if ( containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode,  before);\n            }\n        }\n    }\n};\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // Vnode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            patch(oldStartVnode, newEndVnode);\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            patch(oldEndVnode, newStartVnode);\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            {\n                // new element\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if ( newStartIdx > newEndIdx) {\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\nconst isSameVnode = (vnode1, vnode2) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (vnode1.$tag$ === vnode2.$tag$) {\n        return true;\n    }\n    return false;\n};\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const text = newVNode.$text$;\n    if ( text === null) {\n        // element node\n        {\n            {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if ( oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if ( oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if ( oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n    }\n    else if ( oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const cmpMeta = hostRef.$cmpMeta$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    if ( cmpMeta.$attrsToReflect$) {\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = ( hostElm.shadowRoot || hostElm );\n    {\n        scopeId = hostElm['s-sc'];\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n};\nconst getElement = (ref) => ( getHostRef(ref).$hostElement$ );\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if ( ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise(r => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    {\n        hostRef.$flags$ |= 16 /* isQueuedForUpdate */;\n    }\n    if ( hostRef.$flags$ & 4 /* isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return  writeTask(dispatch) ;\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance =  hostRef.$lazyInstance$ ;\n    let promise;\n    endSchedule();\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if ( isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n        callRender(hostRef, instance);\n    }\n    if ( rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map(cb => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n};\nconst callRender = (hostRef, instance, elm) => {\n    try {\n        instance =  instance.render() ;\n        {\n            hostRef.$flags$ &= ~16 /* isQueuedForUpdate */;\n        }\n        {\n            hostRef.$flags$ |= 2 /* hasRendered */;\n        }\n        {\n            {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                {\n                    renderVdom(hostRef, instance);\n                }\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    return null;\n};\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (!(hostRef.$flags$ & 64 /* hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* hasLoadedComponent */;\n        {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        endPostUpdate();\n        {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad();\n            }\n        }\n    }\n    else {\n        endPostUpdate();\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* isWaitingForChildren */ | 512 /* needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    {\n        addHydratedFlag(doc.documentElement);\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n};\nconst safeCall = (instance, method, arg) => {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst addHydratedFlag = (elm) => ( elm.classList.add('hydrated') );\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if ( propType & 4 /* Boolean */) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return propValue === 'false' ? false : propValue === '' || !!propValue;\n        }\n        if ( propType & 1 /* String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const elm =  hostRef.$hostElement$ ;\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance =  hostRef.$lazyInstance$ ;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    if (( !(flags & 8 /* isConstructingInstance */) || oldVal === undefined) && newVal !== oldVal) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if ( instance) {\n            // get an array of method names of watch functions to call\n            if ( cmpMeta.$watchers$ && flags & 128 /* isWatchReady */) {\n                const watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.map(watchMethodName => {\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            instance[watchMethodName](newVal, oldVal, propName);\n                        }\n                        catch (e) {\n                            consoleError(e, elm);\n                        }\n                    });\n                }\n            }\n            if ( (flags & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if ( cmpMeta.$members$) {\n        if ( Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ( (memberFlags & 31 /* Prop */ || (( flags & 2 /* proxyState */) && memberFlags & 32 /* State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n        });\n        if ( ( flags & 1 /* isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // create an array of attributes to observe\n            // and also create a map of html attribute name to js property name\n            Cstr.observedAttributes = members\n                .filter(([_, m]) => m[0] & 15 /* HasAttribute */) // filter to only keep props that should match attributes\n                .map(([propName, m]) => {\n                const attrName = m[1] || propName;\n                attrNameToPropName.set(attrName, propName);\n                if ( m[0] & 512 /* ReflectAttr */) {\n                    cmpMeta.$attrsToReflect$.push([propName, attrName]);\n                }\n                return attrName;\n            });\n        }\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ( (hostRef.$flags$ & 32 /* hasInitializedComponent */) === 0) {\n        {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime();\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if ( !Cstr.isProxied) {\n                // we'eve never proxied this Constructor before\n                // let's add the getters/setters to its prototype before\n                // the first time we create an instance of the implementation\n                {\n                    cmpMeta.$watchers$ = Cstr.watchers;\n                }\n                proxyComponent(Cstr, cmpMeta, 2 /* proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            {\n                hostRef.$flags$ |= 8 /* isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            {\n                hostRef.$flags$ &= ~8 /* isConstructingInstance */;\n            }\n            {\n                hostRef.$flags$ |= 128 /* isWatchReady */;\n            }\n            endNewInstance();\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        if ( Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            const scopeId = getScopeId(cmpMeta);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if ( ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the intial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst fireConnectedCallback = (instance) => {\n    {\n        safeCall(instance, 'connectedCallback');\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (!(hostRef.$flags$ & 1 /* hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* hasConnected */;\n            {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if (\n                        ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if ( cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        else {\n            // fire off connectedCallback() on component instance\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        endConnected();\n    }\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const instance =  hostRef.$lazyInstance$ ;\n        {\n            safeCall(instance, 'disconnectedCallback');\n        }\n    }\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    const endBootstrap = createTime();\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    let appLoadFallback;\n    let isBootstrapping = true;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    lazyBundles.map(lazyBundle => lazyBundle[1].map(compactMeta => {\n        const cmpMeta = {\n            $flags$: compactMeta[0],\n            $tagName$: compactMeta[1],\n            $members$: compactMeta[2],\n            $listeners$: compactMeta[3],\n        };\n        {\n            cmpMeta.$members$ = compactMeta[2];\n        }\n        {\n            cmpMeta.$attrsToReflect$ = [];\n        }\n        {\n            cmpMeta.$watchers$ = {};\n        }\n        const tagName =  cmpMeta.$tagName$;\n        const HostElement = class extends HTMLElement {\n            // StencilLazyHost\n            constructor(self) {\n                // @ts-ignore\n                super(self);\n                self = this;\n                registerHost(self, cmpMeta);\n                if ( cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                    // this component is using shadow dom\n                    // and this browser supports shadow dom\n                    // add the read-only property \"shadowRoot\" to the host element\n                    // adding the shadow root build conditionals to minimize runtime\n                    {\n                        {\n                            self.attachShadow({ mode: 'open' });\n                        }\n                    }\n                }\n            }\n            connectedCallback() {\n                if (appLoadFallback) {\n                    clearTimeout(appLoadFallback);\n                    appLoadFallback = null;\n                }\n                if (isBootstrapping) {\n                    // connectedCallback will be processed once all components have been registered\n                    deferredConnectedCallbacks.push(this);\n                }\n                else {\n                    plt.jmp(() => connectedCallback(this));\n                }\n            }\n            disconnectedCallback() {\n                plt.jmp(() => disconnectedCallback(this));\n            }\n            componentOnReady() {\n                return getHostRef(this).$onReadyPromise$;\n            }\n        };\n        cmpMeta.$lazyBundleId$ = lazyBundle[0];\n        if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n            cmpTags.push(tagName);\n            customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* isElementConstructor */));\n        }\n    }));\n    {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map(host => host.connectedCallback());\n    }\n    else {\n        {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst getAssetPath = (path) => {\n    const assetUrl = new URL(path, plt.$resourcesUrl$);\n    return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\nconst hostRefs = new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    {\n        hostRef.$onReadyPromise$ = new Promise(r => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => ( 0, console.error)(e, el);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    const module =  cmpModules.get(bundleId) ;\n    if (module) {\n        return module[exportName];\n    }\n    return import(\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${ ''}`).then(importedModule => {\n        {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = new Map();\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst flush = () => {\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\n\nexport { Host as H, getElement as a, bootstrapLazy as b, getAssetPath as g, h, promiseResolve as p, registerInstance as r };\n"]},"metadata":{},"sourceType":"module"}