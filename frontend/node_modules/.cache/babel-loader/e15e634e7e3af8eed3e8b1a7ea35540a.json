{"ast":null,"code":"var _jsxFileName = \"/home/gael/development/front-lamar/src/pages/Gastos/components/Tipos.tsx\",\n    _s = $RefreshSig$();\n\nimport { IonItem, IonLabel, IonList, IonToggle } from \"@ionic/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectGasto } from \"../../../redux/actions/formGasto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tipo = () => {\n  _s();\n\n  const {\n    lista = [],\n    tipo = ''\n  } = useSelector(state => state.formGasto);\n  const dispatch = useDispatch();\n\n  const selectItem = item => dispatch(selectGasto(item));\n\n  const comprobar = val => val == tipo;\n\n  return /*#__PURE__*/_jsxDEV(IonList, {\n    children: lista.map(item => {\n      const status = comprobar(item.id);\n      return /*#__PURE__*/_jsxDEV(IonItem, {\n        type: \"button\",\n        onClick: () => selectItem(item.id),\n        lines: \"none\",\n        detail: false,\n        className: status ? 'selected' : '',\n        color: status ? 'light' : '',\n        children: [/*#__PURE__*/_jsxDEV(IonLabel, {\n          children: item.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(IonToggle, {\n          color: \"primary\",\n          checked: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 21\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 24\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Tipo, \"VcbOFthwyziy3RSdNLZNEr3w3xo=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Tipo;\nexport default Tipo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tipo\");","map":{"version":3,"sources":["/home/gael/development/front-lamar/src/pages/Gastos/components/Tipos.tsx"],"names":["IonItem","IonLabel","IonList","IonToggle","useDispatch","useSelector","selectGasto","Tipo","lista","tipo","state","formGasto","dispatch","selectItem","item","comprobar","val","map","status","id","text"],"mappings":";;;AAAA,SAASA,OAAT,EAAkBC,QAAlB,EAA4BC,OAA5B,EAAqCC,SAArC,QAAsD,cAAtD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,QAA4B,kCAA5B;;;AAIA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACf,QAAM;AAAEC,IAAAA,KAAK,GAAG,EAAV;AAAcC,IAAAA,IAAI,GAAG;AAArB,MAAmEJ,WAAW,CAAEK,KAAD,IAAgBA,KAAK,CAACC,SAAvB,CAApF;AACA,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;;AACA,QAAMS,UAAU,GAAIC,IAAD,IAAkBF,QAAQ,CAACN,WAAW,CAACQ,IAAD,CAAZ,CAA7C;;AACA,QAAMC,SAAS,GAAIC,GAAD,IAAiBA,GAAG,IAAIP,IAA1C;;AAEA,sBAAQ,QAAC,OAAD;AAAA,cAEAD,KAAK,CAACS,GAAN,CAAUH,IAAI,IAAI;AACd,YAAMI,MAAM,GAAGH,SAAS,CAACD,IAAI,CAACK,EAAN,CAAxB;AAEA,0BAAO,QAAC,OAAD;AAEH,QAAA,IAAI,EAAC,QAFF;AAGH,QAAA,OAAO,EAAE,MAAMN,UAAU,CAACC,IAAI,CAACK,EAAN,CAHtB;AAIH,QAAA,KAAK,EAAC,MAJH;AAKH,QAAA,MAAM,EAAE,KALL;AAMH,QAAA,SAAS,EAAGD,MAAM,GAAE,UAAF,GAAa,EAN5B;AAOH,QAAA,KAAK,EAAEA,MAAM,GAAG,OAAH,GAAa,EAPvB;AAAA,gCASH,QAAC,QAAD;AAAA,oBAAWJ,IAAI,CAACM;AAAhB;AAAA;AAAA;AAAA;AAAA,gBATG,eAUH,QAAC,SAAD;AAAW,UAAA,KAAK,EAAC,SAAjB;AAA2B,UAAA,OAAO,EAAEF;AAApC;AAAA;AAAA;AAAA;AAAA,gBAVG;AAAA,SACEJ,IAAI,CAACK,EADP;AAAA;AAAA;AAAA;AAAA,cAAP;AAYH,KAfD;AAFA;AAAA;AAAA;AAAA;AAAA,UAAR;AAqBH,CA3BD;;GAAMZ,I;UACuEF,W,EACxDD,W;;;KAFfG,I;AA6BN,eAAeA,IAAf","sourcesContent":["import { IonItem, IonLabel, IonList, IonToggle } from \"@ionic/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectGasto } from \"../../../redux/actions/formGasto\";\nimport { gastoLista } from \"../../../redux/reducers/gasto\";\n\n\nconst Tipo = () => { \n    const { lista = [], tipo = '' }: { lista: gastoLista[], tipo: string } = useSelector((state: any) => state.formGasto);\n    const dispatch = useDispatch();\n    const selectItem = (item: string) => dispatch(selectGasto(item));\n    const comprobar = (val: string) => val == tipo;\n \n    return (<IonList>\n        {\n            lista.map(item => {\n                const status = comprobar(item.id);\n                \n                return <IonItem\n                    key={item.id}\n                    type='button'\n                    onClick={() => selectItem(item.id)}\n                    lines=\"none\"\n                    detail={false}\n                    className={ status? 'selected':''}\n                    color={status ? 'light' : ''}\n                >\n                    <IonLabel>{item.text}</IonLabel>\n                    <IonToggle color='primary' checked={status} />\n                </IonItem>\n            }\n            )\n        }\n    </IonList>);\n}\n\nexport default Tipo;"]},"metadata":{},"sourceType":"module"}